<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- jsp 이외의 경로를 접근할 수 있게 해준다. -->
	<mvc:annotation-driven />
	<mvc:default-servlet-handler/>
	
	<!-- 
		타일즈 등록.  타일즈를 internalResourceView 보다 위쪽에 등록해줘야 의도한 view를 찍어낼 수 있다. 우선순위를 갖는다.
		등록 순서에 상관없이 쓰고 싶다면, property로 order로 순위를 설정해주면 된다.
		타일즈를 우선순위로 쓸 것. 	
	 -->
	<bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<property name="order" value="1"/>	
	</bean>
	<bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions" >
			<array>
				<value>/WEB-INF/tiles/*_tiles.xml</value>
			</array>
		</property>
	</bean>
	
	<!-- controller 에서 return 할때, prefix와 suffix를 미리 설정해준다. -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/"/>
		<property name="suffix" value=".jsp" />
		<property name="order" value="2"></property>
	</bean>
	
	
	
	
	<!-- 컨트롤러 전체를 스캔해준다. -->
	<context:component-scan base-package="a.cotroller" />
	
	<!-- WebSocket 등록 -->
	<!-- 
		controller들을 어노테이션으로 자동등록 해놨기 때문에, 이 경우 등록되면서 컨트롤러 클래스 이름으로 자동 등록된다.
		단, 어노테이션 등록시, 괄호안에 지정해주면 그 이름으로 등록된다. 아래 handler의 경우가 그렇다.
		같은 패키지 안에 같은 이름의 클래스들이 있을경우, 어노테이션 옆에 이름을 다르게 지정해서 등록해주면 된다.
	-->
	<websocket:handlers>
		<websocket:mapping handler="wsController" path="/handle"/>
		<websocket:handshake-interceptors>
			<bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />
		</websocket:handshake-interceptors>
	</websocket:handlers>
	
	<!-- webSocket 관리용 Map 등록 -->
	<bean id="data" class="a.data.WebSession" />
	<bean id="ws" factory-bean="data" factory-method="createMap" />
	
	
	<!-- 서비스 전체 스캔 -->
	<context:component-scan base-package="a.service" />
	
	<!-- websocket 등록 -->
	<websocket:handlers>
		<websocket:mapping handler="alertController" path="/alert"/>
		<websocket:handshake-interceptors>
			<bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
	</websocket:handlers>
	
	<!-- 로그인 한 사람들 관리할 websocket 등록 -->
	<websocket:handlers>
		<websocket:mapping handler="logonSocketController" path="/logon"/>
		<websocket:handshake-interceptors>
			<bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
	</websocket:handlers>
	
	<!-- datasource 등록 -->
	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="ds">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@javadb.cfpufpcglvgh.ap-northeast-2.rds.amazonaws.com:1521:orcl" />
		<property name="username" value="hooAu" />
		<property name="password" value="syss0602" />
	</bean>
	
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="fac">
		<property name="dataSource" ref="ds"/>
		<property name="mapperLocations">
			<list>
				<value>/WEB-INF/mappers/*_mapper.xml</value>
			</list>
		</property>
	</bean>
	
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlTemplate">
		<constructor-arg name="sqlSessionFactory" ref="fac"/>
	</bean>
	
	
	<!-- txManager 등록 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<constructor-arg name="dataSource" ref="ds"/>
	</bean>
	
	<tx:advice id="tx" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:advisor advice-ref="tx" pointcut="within(a.service.*)"/>
	</aop:config>
	
	<!-- gson 등록 -->
	<bean id="gsonBuilder" class="com.google.gson.GsonBuilder">
		<property name="dateFormat" value="yyyy/MM/dd HH:mm"/>
	</bean>
	<bean id="gson" factory-bean="gsonBuilder" factory-method="create"/>
	
	<!-- mail Sender 등록 -->
	<bean class="org.springframework.mail.javamail.JavaMailSenderImpl" id="mailSender">
		<property name="host" value="smtp.gmail.com" />
		<property name="username" value="rooting0602@gmail.com" />
		<property name="password" value="syss0602" />
		<property name="port" value="587" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>
	
	
	
</beans>
